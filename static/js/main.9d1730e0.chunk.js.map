{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","email","id","name","className","alt","src","CardList","robots","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","SearchBox","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUAeeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KAEtB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BJ,EAA1B,cACtB,6BACI,4BAAKC,GACL,2BAAIF,MCYLM,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAO,kBAAC,EAAD,CACHC,IAAKD,EACLT,GAAIQ,EAAKR,GACTC,KAAMO,EAAKP,KACXF,MAAOS,EAAKT,aCCrBY,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,kBAAC,WAAD,KACI,2BACIX,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC/DJ,EAAMK,WCiBJC,E,YAnBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHA,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAI3B,OAAGG,KAAKJ,MAAMC,SACH,4DAEAG,KAAKX,MAAMK,a,GAhBDQ,aCqBrBC,G,kMAGEH,KAAKX,MAAMe,oB,+BAGL,IAAD,EACoDJ,KAAKX,MAAvDZ,EADF,EACEA,OAAQ4B,EADV,EACUA,YAAaC,EADvB,EACuBA,eAAgBC,EADvC,EACuCA,UACtCC,EAAiB/B,EAAOgC,QAAO,SAAAC,GACjC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASP,EAAYM,kBAEzD,OAAGJ,EAEK,yBAAKlC,UAAU,MACX,wBAAIA,UAAU,MAAd,YAKJ,kBAAC,WAAD,KACI,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,UACA,kBAACwC,EAAD,CAAW7B,aAAcsB,IACzB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU7B,OAAQ+B,Y,GAzBhCN,cAmCHY,eAjDS,SAAAlB,GACpB,MAAO,CACHS,YAAaT,EAAMmB,aAAaV,YAChC5B,OAAQmB,EAAMoB,cAAcvC,OAC5B8B,UAAWX,EAAMoB,cAAcT,UAC/BT,MAAOF,EAAMoB,cAAclB,UAGR,SAACmB,GACxB,MAAO,CACHX,eAAgB,SAACY,GAAD,OAAUD,ECZO,CACvChC,KCRiC,sBDSjCkC,QDUwDD,EAAME,OAAOC,SAC/DjB,gBAAiB,kBAAMa,GCRI,SAACA,GAClCA,EAAS,CACPhC,KCZkC,2BDcpCqC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CACrBhC,KChB8B,yBDiB9BkC,QAASO,OAEVC,OAAM,SAAA7B,GAAK,OAAImB,EAAS,CACvBhC,KCnB6B,wBDoB7BkC,QAASrB,cDkCFgB,CAA6CX,GG9CxCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCXAC,EAAqB,CACvB5B,YAAa,IAEX6B,EAAqB,CACvB3B,WAAW,EACX9B,OAAQ,GACRqB,MAAO,ICDLqC,EAASC,cACTC,EAAcC,YAAgB,CAACvB,aDET,WAA0C,IAAzCnB,EAAwC,uDAAlCqC,EAAoBM,EAAc,uDAAP,GAC1D,OAAOA,EAAOtD,MACV,IFjB2B,sBEkBvB,OAAOuD,OAAOC,OAAO,GAAI7C,EAAO,CAACS,YAAakC,EAAOpB,UACzD,QACI,OAAOvB,ICPgCoB,cDWtB,WAAwC,IAAvCpB,EAAsC,uDAAhCsC,EAAoBK,EAAY,uDAAL,GAC7D,OAAQA,EAAOtD,MACX,IFxBgC,yBEyB5B,OAAOuD,OAAOC,OAAO,GAAI7C,EAAO,CAACW,WAAW,IAChD,IFzBgC,yBE0B5B,OAAOiC,OAAOC,OAAO,GAAI7C,EAAO,CAC5BnB,OAAQ8D,EAAOpB,QACfZ,WAAW,IAEnB,IF7B+B,wBE8B3B,OAAOiC,OAAOC,OAAO,GAAI7C,EAAO,CAC5BE,MAAOyC,EAAOpB,QACdZ,WAAW,IAEnB,QACI,OAAOX,MCzBX8C,EAAQC,YAAYN,EAAaO,YAAgBT,EAAQU,MAC/DC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OACSM,SAASC,eAAe,SF+GnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.9d1730e0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({email, id, name}) => {\n\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='profile' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return <Card\n                        key={i}\n                        id={user.id}\n                        name={user.name}\n                        email={user.email}\n                    />\n                })\n            }\n        </div>\n    )\n};\n\nexport default CardList;\n","import React, {Fragment} from 'react';\n\nconst Searchbox = ({searchfield, searchChange}) => {\n    return(\n        <Fragment>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </Fragment>\n    )\n};\nexport default Searchbox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;\n","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n\n    }\n    componentDidCatch(error, errorInfo) {\n        this.setState({hasError: true})\n    }\n\n    render(){\n      if(this.state.hasError){\n          return <h1>Ooops. Something went wrong!</h1>\n      }else {\n          return this.props.children\n      }\n    }\n}\nexport default ErrorBoundry;\n","import React, {Fragment, Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport './App.css';\nimport {setSearchField, requestRobots} from \"../actions\";\n\nconst mapStateToProps = state =>{\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n};\nconst mapDispatchToProps = (dispatch)=>{\n    return {\n        onSearchChange: (event)=> dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n};\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render (){\n        const {robots, searchField, onSearchChange, isPending} = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        });\n        if(isPending){\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>Loading</h1>\n                </div>\n            )\n        }else{\n            return (\n                <Fragment>\n                    <div className='tc'>\n                        <h1 className='f1'>Robots</h1>\n                        <SearchBox searchChange={onSearchChange} />\n                        <Scroll>\n                            <ErrorBoundry>\n                                <CardList robots={filteredRobots}/>\n                            </ErrorBoundry>\n                        </Scroll>\n                    </div>\n                </Fragment>\n            );\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => dispatch({\n        type: REQUEST_ROBOTS_SUCCESS,\n        payload: data\n      }))\n      .catch(error => dispatch({\n        type: REQUEST_ROBOTS_FAILED,\n        payload: error\n      }))\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nconst initialStateSearch = {\n    searchField: ''\n};\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n};\n\nexport const requestRobots = (state=initialStateRobots, action={})=>{\n  switch (action.type) {\n      case REQUEST_ROBOTS_PENDING:\n          return Object.assign({}, state, {isPending: true});\n      case REQUEST_ROBOTS_SUCCESS:\n          return Object.assign({}, state, {\n              robots: action.payload,\n              isPending: false\n          });\n      case REQUEST_ROBOTS_FAILED:\n          return Object.assign({}, state, {\n              error: action.payload,\n              isPending: false\n          });\n      default:\n          return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger} from \"redux-logger/src\";\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {searchRobots, requestRobots} from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}